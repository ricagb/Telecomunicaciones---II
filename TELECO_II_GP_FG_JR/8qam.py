# -*- coding: utf-8 -*-
"""8QAM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xoz0vYk54ZoRIl_QrnypbBTbrZCL9a4t
"""



import numpy as np
import matplotlib.pyplot as plt

# Tabla de verdad para 8-QAM (bits → símbolo complejo)
bit_symbol_map = {
    '000': (1+1j), '001': (1-1j),
    '010': (-1+1j), '011': (-1-1j),
    '100': (2+0j), '101': (-2+0j),
    '110': (0+2j), '111': (0-2j)
}

# Normalización (promedio de energía unitaria)
bit_symbol_map = {k: v / np.sqrt(2) for k, v in bit_symbol_map.items()}

bit_list = list(bit_symbol_map.keys())
symbols_list = list(bit_symbol_map.values())

# --- Tabla de Verdad Visual Mejorada 8-QAM ---
import pandas as pd

# Crear datos para la tabla
table_data = []
for bits, sym in bit_symbol_map.items():
    magnitude = np.abs(sym)
    phase_deg = np.angle(sym, deg=True) % 360
    table_data.append([
        bits,
        f"{sym.real:.2f} {'+' if sym.imag >= 0 else '-'} {abs(sym.imag):.2f}j",
        f"{sym.real:.2f}",
        f"{sym.imag:.2f}",
        f"{magnitude:.2f}",
        f"{phase_deg:.1f}°"
    ])

# Crear figura con tabla
fig, ax = plt.subplots(figsize=(9, 3.5))
ax.axis('off')
col_labels = ["Bits", "Símbolo", "Parte Real", "Parte Imaginaria", "|Símbolo|", "Fase (°)"]
table = ax.table(cellText=table_data,
                 colLabels=col_labels,
                 loc='center',
                 cellLoc='center')

table.auto_set_font_size(False)
table.set_fontsize(10)
table.scale(1.2, 1.5)
plt.title("Tabla de Verdad 8-QAM (Normalizado)", pad=20)
plt.tight_layout()
plt.show()


# --- Generar símbolos aleatorios para la señal modulada ---
def generate_8qam_symbols(n_symbols):
    indices = np.random.choice(len(symbols_list), n_symbols)
    symbols = [symbols_list[i] for i in indices]
    bits = [bit_list[i] for i in indices]
    return np.array(symbols), bits, indices

# --- Modulación en banda pasante ---
def modulate_qam(symbols, indices, fc=10, fs=100, symbol_duration=1):
    t = np.arange(0, len(symbols)*symbol_duration, 1/fs)
    signal = np.zeros_like(t)
    for i, (s, idx) in enumerate(zip(symbols, indices)):
        idx_range = slice(i*fs, (i+1)*fs)
        signal[idx_range] = np.real(s) * np.cos(2*np.pi*fc*t[idx_range]) - np.imag(s) * np.sin(2*np.pi*fc*t[idx_range])
    return t, signal

# --- Colores únicos para cada símbolo ---
cmap = plt.cm.get_cmap("tab10", len(symbols_list))
colors = [cmap(i) for i in range(len(symbols_list))]

# Generar señal para visualizar (solo 8 símbolos aleatorios)
n = 8
symbols, bits_used, indices = generate_8qam_symbols(n)
t, qam_sig = modulate_qam(symbols, indices)

# --- Señal modulada en el tiempo ---
plt.figure(figsize=(12, 3))
for i in range(n):
    idx_range = slice(i*100, (i+1)*100)
    plt.plot(t[idx_range], qam_sig[idx_range], color=colors[indices[i]], label=bits_used[i])
plt.title("Señal Modulada 8-QAM")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend(title="Bits", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

# --- Diagrama de Constelación: mostrar TODOS los símbolos ---
plt.figure(figsize=(5, 5))
for i, sym in enumerate(symbols_list):
    plt.scatter(np.real(sym), np.imag(sym), color=colors[i], label=bit_list[i], s=100)
plt.title("Diagrama de Constelación 8-QAM (completo)")
plt.xlabel("In-phase (I)")
plt.ylabel("Quadrature (Q)")
plt.axhline(0, color='gray', linewidth=0.5)
plt.axvline(0, color='gray', linewidth=0.5)
plt.grid(True)
plt.axis("equal")
plt.legend(title="Bits", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

# --- Diagrama Fasorial: mostrar TODOS los vectores ---
plt.figure(figsize=(5, 5))
for i, sym in enumerate(symbols_list):
    plt.arrow(0, 0, np.real(sym), np.imag(sym),
              head_width=0.1, color=colors[i], length_includes_head=True, label=bit_list[i])
plt.title("Diagrama Fasorial 8-QAM (completo)")
plt.xlabel("In-phase (I)")
plt.ylabel("Quadrature (Q)")
plt.axhline(0, color='gray', linewidth=0.5)
plt.axvline(0, color='gray', linewidth=0.5)
plt.grid(True)
plt.axis("equal")
plt.legend(title="Bits", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

