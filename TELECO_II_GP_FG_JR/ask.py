# -*- coding: utf-8 -*-
"""ASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v12LPCD36iHaNfQvufen8PzMnJwWoeLf
"""



import numpy as np
import matplotlib.pyplot as plt

# Tabla de verdad para ASK
print("Tabla de Verdad ASK (bit → amplitud):")
print("0 → A1 (amplitud baja)")
print("1 → A2 (amplitud alta)")

# Generar bits aleatorios
def generate_bits(n):
    return np.random.randint(0, 2, n)

# Modulación ASK
def ask_modulation(bits, A1=1, A2=2, f=5, fs=1000, symbol_duration=0.1):
    samples_per_bit = int(fs * symbol_duration)
    t = np.arange(0, len(bits) * symbol_duration, 1/fs)
    signal = np.zeros_like(t)
    amp_trace = np.zeros_like(t)  # Para mostrar amplitud en el tiempo
    for i, bit in enumerate(bits):
        amp = A1 if bit == 0 else A2
        idx = slice(i * samples_per_bit, (i+1) * samples_per_bit)
        signal[idx] = amp * np.sin(2 * np.pi * f * t[idx])
        amp_trace[idx] = amp
    return t, signal, amp_trace, samples_per_bit

# Parámetros
n = 16
bits = generate_bits(n)
A1, A2 = 1, 2
f = 5
fs = 1000
symbol_duration = 0.1

# Modulación
t, ask_sig, amp_trace, spb = ask_modulation(bits, A1, A2, f, fs, symbol_duration)

# Mostrar bits
print(f"\nBits generados: {''.join(map(str, bits))}")

# Colores por bit
colors = ['blue', 'red']

# Señal ASK coloreada por bit
plt.figure(figsize=(12, 3))
for i, bit in enumerate(bits):
    idx = slice(i * spb, (i + 1) * spb)
    plt.plot(t[idx], ask_sig[idx], color=colors[bit], label=f"Bit {bit}" if i == 0 or bits[i] != bits[i-1] else "")
plt.title("Señal ASK Modulada")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Amplitud en el tiempo
plt.figure(figsize=(12, 2))
plt.plot(t, amp_trace, color='green')
plt.title("Amplitud Instantánea ASK")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud")
plt.grid(True)
plt.tight_layout()
plt.show()