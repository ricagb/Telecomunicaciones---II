# -*- coding: utf-8 -*-
"""16QAM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nq0grb9a1tM_Rkg3nNvl-2D0fAClGtVj
"""

import numpy as np
import matplotlib.pyplot as plt

# ---------------- Parámetros ----------------
samples_per_symbol = 10
M = 16  # 16-QAM
amplitudes = [-3, -1, 1, 3]

# Mapeo de bits (Gray mapping opcional)
bit_map = {
    (-3, -3): "0000", (-3, -1): "0001", (-3, 1): "0011", (-3, 3): "0010",
    (-1, -3): "0100", (-1, -1): "0101", (-1, 1): "0111", (-1, 3): "0110",
    (1, -3): "1100", (1, -1): "1101", (1, 1): "1111", (1, 3): "1110",
    (3, -3): "1000", (3, -1): "1001", (3, 1): "1011", (3, 3): "1010",
}

# ---------------- Mostrar Tabla de Verdad completa ----------------
table_data = [["Símbolo", "Parte Real", "Parte Imaginaria", "Bits"]]
full_constellation = []
for r in amplitudes:
    for i in amplitudes:
        sym = (r + 1j*i) / np.sqrt(10)  # Normalización de energía promedio = 1
        full_constellation.append(sym)
        bits = bit_map.get((r, i), "----")
        table_data.append([f"{r}+{i}j", str(r), str(i), bits])

plt.figure(figsize=(9, 6))
plt.axis("off")
table = plt.table(cellText=table_data, colLabels=None, loc='center', cellLoc='center')
table.auto_set_font_size(False)
table.set_fontsize(10)
table.scale(1, 1.5)
plt.title("Tabla de Verdad 16-QAM (Completa)", pad=20)
plt.show()

# ---------------- Generar Símbolos Aleatorios ----------------
num_symbols = 16  # para visualización de señal
real = np.random.choice(amplitudes, num_symbols)
imag = np.random.choice(amplitudes, num_symbols)
symbols = (real + 1j * imag) / np.sqrt(10)

# ---------------- Señal en el tiempo ----------------
signal_upsampled = np.zeros(num_symbols * samples_per_symbol, dtype=complex)
signal_upsampled[::samples_per_symbol] = symbols
pulse_shape = np.ones(samples_per_symbol)
signal_time = np.convolve(signal_upsampled, pulse_shape, mode='same')

# ---------------- Diagrama Fasorial (completo) ----------------
plt.figure(figsize=(6, 6))
colors = plt.cm.tab20(np.linspace(0, 1, len(full_constellation)))
for i, sym in enumerate(full_constellation):
    plt.arrow(0, 0, np.real(sym), np.imag(sym),
              head_width=0.05, length_includes_head=True,
              color=colors[i])
plt.grid(True)
plt.axhline(0, color='gray')
plt.axvline(0, color='gray')
plt.title("Diagrama Fasorial 16-QAM (Todos los símbolos)")
plt.xlabel("Parte Real (I)")
plt.ylabel("Parte Imaginaria (Q)")
plt.axis('equal')
plt.tight_layout()
plt.show()

# ---------------- Señal en el tiempo (I y Q) ----------------
time = np.arange(len(signal_time))
plt.figure(figsize=(12, 4))
plt.plot(time, np.real(signal_time), label='In-Phase (I)', color='blue')
plt.plot(time, np.imag(signal_time), label='Quadrature (Q)', color='green')
plt.title("Señal 16-QAM en el tiempo (Símbolos Aleatorios)")
plt.xlabel("Muestras")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# ---------------- Diagrama de Constelación (completo) ----------------
plt.figure(figsize=(6, 6))
for i, sym in enumerate(full_constellation):
    bits = list(bit_map.values())[i]
    plt.scatter(np.real(sym), np.imag(sym), color=colors[i], label=bits)
plt.title("Constelación 16-QAM (Completa)")
plt.xlabel("Parte Real (I)")
plt.ylabel("Parte Imaginaria (Q)")
plt.grid(True)
plt.axhline(0, color='gray')
plt.axvline(0, color='gray')
plt.axis('equal')
plt.legend(title="Bits", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()