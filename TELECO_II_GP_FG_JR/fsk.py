# -*- coding: utf-8 -*-
"""FSK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1zRmtdkc2T2ElnBy6Y3FsnQQ-DZ0fAw
"""



import numpy as np
import matplotlib.pyplot as plt

# Tabla de verdad FSK
print("Tabla de Verdad FSK (bit → frecuencia):")
print("0 → f1 (frecuencia baja)")
print("1 → f2 (frecuencia alta)")

# Generar bits aleatorios
def generate_bits(n):
    return np.random.randint(0, 2, n)

# Modulación FSK
def fsk_modulation(bits, f1=5, f2=10, fs=1000, symbol_duration=0.1):
    samples_per_bit = int(fs * symbol_duration)
    t = np.arange(0, len(bits) * symbol_duration, 1/fs)
    signal = np.zeros_like(t)
    freq_trace = np.zeros_like(t)  # Para trazar frecuencia en el tiempo
    for i, bit in enumerate(bits):
        freq = f1 if bit == 0 else f2
        idx = slice(i * samples_per_bit, (i+1) * samples_per_bit)
        signal[idx] = np.sin(2 * np.pi * freq * t[idx])
        freq_trace[idx] = freq
    return t, signal, freq_trace, samples_per_bit

# Parámetros
n = 16
bits = generate_bits(n)
f1, f2 = 5, 10
fs = 1000
symbol_duration = 0.1

# Modulación
t, fsk_sig, freq_trace, spb = fsk_modulation(bits, f1, f2, fs, symbol_duration)

# Mostrar bits
print(f"\nBits generados: {''.join(map(str, bits))}")

# Señal FSK con colores por bit
colors = ['blue', 'red']
plt.figure(figsize=(12, 3))
for i, bit in enumerate(bits):
    idx = slice(i * spb, (i + 1) * spb)
    plt.plot(t[idx], fsk_sig[idx], color=colors[bit], label=f"Bit {bit}" if i == 0 or bits[i] != bits[i-1] else "")
plt.title("Señal FSK Modulada")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Gráfico de la frecuencia en el tiempo
plt.figure(figsize=(12, 2))
plt.plot(t, freq_trace, color='purple')
plt.title("Frecuencia instantánea FSK")
plt.xlabel("Tiempo [s]")
plt.ylabel("Frecuencia [Hz]")
plt.grid(True)
plt.tight_layout()
plt.show()